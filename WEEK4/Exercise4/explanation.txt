In the controller method getCountryIndia(), Spring first routes the incoming GET request for /country to our CountryController, where we log the start, load the country.xml configuration using ClassPathXmlApplicationContext, retrieve the Country bean by its ID, and then return that bean instance. Because our class is annotated with @RestController, Spring treats the return value not as a view name but as the response body. Under the hood, Spring Boot detects Jackson on the classpath and automatically registers a JSON HttpMessageConverter; when our controller returns the Country object, Jackson serializes its code and name properties into a JSON object and sets the Content-Type header to application/json. To verify this in the browser, I opened Developer Tools, went to the Network tab, and after reloading the /country URL I clicked on the request entry; the Headers panel showed the request URL, method (GET), status code (200 OK), and response headers including Content-Type: application/json. Likewise, in Postman I issued the same GET request, switched to the “Headers” tab in the response section, and saw identical metadata-Content-Type: application/json; charset=UTF-8, Content-Length, Date, and other standard headers-confirming that the bean was correctly converted to JSON and delivered with proper HTTP headers.
