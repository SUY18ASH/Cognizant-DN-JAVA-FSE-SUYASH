Hands-on 4:
Difference between JPA, Hibernate and Spring Data JPA:-

When working with databases in Java, JPA, Hibernate, and Spring Data JPA are all terms that come up a lot. Here’s how I understand them:

JPA (Java Persistence API):
- It's like a set of rules or a specification (JSR 338) that tells us how to map Java objects to database tables.
- But JPA is just an interface, it doesn't have its own working code. So we can’t use it directly—we need something that actually implements it.
- Hibernate is the most common tool that implements JPA.

Hibernate:
- Hibernate is a framework/tool that follows the JPA rules and actually provides the working code.
- It lets us perform CRUD operations using Java objects without writing a lot of SQL manually.
- You still need to write some code to manage sessions, transactions, etc.

Spring Data JPA:
- Spring Data JPA sits on top of JPA and Hibernate.
- It removes a lot of boilerplate code, like no need to write DAO classes manually.
- It provides ready-made methods like `save()`, `findAll()`, and even handles transactions automatically.
- Basically, it helps you get things done faster with less code.

Code Comparison:

Using Hibernate:

```java
public Integer addEmployee(Employee employee) {
    Session session = factory.openSession();
    Transaction tx = null;
    Integer employeeID = null;

    try {
        tx = session.beginTransaction();
        employeeID = (Integer) session.save(employee); 
        tx.commit();
    } catch (HibernateException e) {
        if (tx != null) tx.rollback();
        e.printStackTrace();
    } finally {
        session.close();
    }
    return employeeID;
}

Here I have to handle sessions, transactions, exceptions, etc., manually.

Using Spring Data JPA:-

EmployeeRepository.java:
    public interface EmployeeRepository extends JpaRepository<Employee, Integer> {}


EmployeeService.java:
    @Autowired
    private EmployeeRepository employeeRepository;
    
    @Transactional
    public void addEmployee(Employee employee) {
        employeeRepository.save(employee);
    }


With Spring Data JPA, it’s super simple. Just extend JpaRepository, and I can call save() directly—no need to manage sessions or transactions manually.
