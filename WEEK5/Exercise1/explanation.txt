In this exercise, I split a monolithic banking application into two independent Spring Boot microservices—one for accounts and one for loans—so that each service is narrowly focused, easier to develop, and can be deployed or scaled on its own. For the Account service, I generated a Spring Boot project with Maven, added the Spring Web and DevTools dependencies, and implemented an AccountController exposing a GET /accounts/{number} endpoint that returns a simple JSON payload. I then ran it on the default port 8080 to verify it responded correctly.

Next, I created the Loan service the same way—another Spring Boot Maven project with its own LoanController and a GET /loans/{number} endpoint returning dummy loan details. To avoid a port conflict with the Account service, I added server.port=8081 to application.properties, built and ran the service on port 8081, and confirmed that both microservices were up and serving their respective endpoints. By decoupling account and loan functionality into separate deployable units, I’ve laid the groundwork for independent development, testing, scaling, and future extension (for example, adding a gateway or discovery service) without the risk of one module bringing down the whole system.
